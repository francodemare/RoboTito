   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Cpu.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Cpu_INT_NMIInterrupt,"ax",%progbits
  18              		.align	1
  19              		.global	Cpu_INT_NMIInterrupt
  20              		.code	16
  21              		.thumb_func
  23              	Cpu_INT_NMIInterrupt:
  24              	.LFB0:
  25              		.file 1 "../Generated_Code/Cpu.c"
   1:../Generated_Code/Cpu.c **** /* ###################################################################
   2:../Generated_Code/Cpu.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/Cpu.c **** **     Filename    : Cpu.c
   4:../Generated_Code/Cpu.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/Cpu.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/Cpu.c **** **     Component   : MKL25Z128LK4
   7:../Generated_Code/Cpu.c **** **     Version     : Component 01.025, Driver 01.04, CPU db: 3.00.000
   8:../Generated_Code/Cpu.c **** **     Datasheet   : KL25P80M48SF0RM, Rev.3, Sep 2012
   9:../Generated_Code/Cpu.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/Cpu.c **** **     Date/Time   : 2014-10-03, 19:02, # CodeGen: 1
  11:../Generated_Code/Cpu.c **** **     Abstract    :
  12:../Generated_Code/Cpu.c **** **
  13:../Generated_Code/Cpu.c **** **     Settings    :
  14:../Generated_Code/Cpu.c **** **
  15:../Generated_Code/Cpu.c **** **     Contents    :
  16:../Generated_Code/Cpu.c **** **         No public methods
  17:../Generated_Code/Cpu.c **** **
  18:../Generated_Code/Cpu.c **** **     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
  19:../Generated_Code/Cpu.c **** **     All Rights Reserved.
  20:../Generated_Code/Cpu.c **** **     
  21:../Generated_Code/Cpu.c **** **     Redistribution and use in source and binary forms, with or without modification,
  22:../Generated_Code/Cpu.c **** **     are permitted provided that the following conditions are met:
  23:../Generated_Code/Cpu.c **** **     
  24:../Generated_Code/Cpu.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  25:../Generated_Code/Cpu.c **** **       of conditions and the following disclaimer.
  26:../Generated_Code/Cpu.c **** **     
  27:../Generated_Code/Cpu.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  28:../Generated_Code/Cpu.c **** **       list of conditions and the following disclaimer in the documentation and/or
  29:../Generated_Code/Cpu.c **** **       other materials provided with the distribution.
  30:../Generated_Code/Cpu.c **** **     
  31:../Generated_Code/Cpu.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  32:../Generated_Code/Cpu.c **** **       contributors may be used to endorse or promote products derived from this
  33:../Generated_Code/Cpu.c **** **       software without specific prior written permission.
  34:../Generated_Code/Cpu.c **** **     
  35:../Generated_Code/Cpu.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  36:../Generated_Code/Cpu.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  37:../Generated_Code/Cpu.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  38:../Generated_Code/Cpu.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  39:../Generated_Code/Cpu.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  40:../Generated_Code/Cpu.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  41:../Generated_Code/Cpu.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  42:../Generated_Code/Cpu.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  43:../Generated_Code/Cpu.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  44:../Generated_Code/Cpu.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:../Generated_Code/Cpu.c **** **     
  46:../Generated_Code/Cpu.c **** **     http: www.freescale.com
  47:../Generated_Code/Cpu.c **** **     mail: support@freescale.com
  48:../Generated_Code/Cpu.c **** ** ###################################################################*/
  49:../Generated_Code/Cpu.c **** /*!
  50:../Generated_Code/Cpu.c **** ** @file Cpu.c
  51:../Generated_Code/Cpu.c **** ** @version 01.04
  52:../Generated_Code/Cpu.c **** ** @brief
  53:../Generated_Code/Cpu.c **** **
  54:../Generated_Code/Cpu.c **** */         
  55:../Generated_Code/Cpu.c **** /*!
  56:../Generated_Code/Cpu.c **** **  @addtogroup Cpu_module Cpu module documentation
  57:../Generated_Code/Cpu.c **** **  @{
  58:../Generated_Code/Cpu.c **** */         
  59:../Generated_Code/Cpu.c **** 
  60:../Generated_Code/Cpu.c **** /* MODULE Cpu. */
  61:../Generated_Code/Cpu.c **** 
  62:../Generated_Code/Cpu.c **** #include "FreeRTOS.h" /* FreeRTOS interface */
  63:../Generated_Code/Cpu.c **** #include "FRTOS1.h"
  64:../Generated_Code/Cpu.c **** #include "RTOSTICKLDD1.h"
  65:../Generated_Code/Cpu.c **** #include "UTIL1.h"
  66:../Generated_Code/Cpu.c **** #include "LED1.h"
  67:../Generated_Code/Cpu.c **** #include "LEDpin3.h"
  68:../Generated_Code/Cpu.c **** #include "BitIoLdd3.h"
  69:../Generated_Code/Cpu.c **** #include "LED2.h"
  70:../Generated_Code/Cpu.c **** #include "LEDpin4.h"
  71:../Generated_Code/Cpu.c **** #include "BitIoLdd4.h"
  72:../Generated_Code/Cpu.c **** #include "PE_Types.h"
  73:../Generated_Code/Cpu.c **** #include "PE_Error.h"
  74:../Generated_Code/Cpu.c **** #include "PE_Const.h"
  75:../Generated_Code/Cpu.c **** #include "IO_Map.h"
  76:../Generated_Code/Cpu.c **** #include "Events.h"
  77:../Generated_Code/Cpu.c **** #include "Cpu.h"
  78:../Generated_Code/Cpu.c **** 
  79:../Generated_Code/Cpu.c **** #ifdef __cplusplus
  80:../Generated_Code/Cpu.c **** extern "C" {
  81:../Generated_Code/Cpu.c **** #endif
  82:../Generated_Code/Cpu.c **** 
  83:../Generated_Code/Cpu.c **** /* Global variables */
  84:../Generated_Code/Cpu.c **** volatile uint8_t SR_reg;               /* Current value of the FAULTMASK register */
  85:../Generated_Code/Cpu.c **** volatile uint8_t SR_lock = 0x00U;      /* Lock */
  86:../Generated_Code/Cpu.c **** 
  87:../Generated_Code/Cpu.c **** 
  88:../Generated_Code/Cpu.c **** /*
  89:../Generated_Code/Cpu.c **** ** ===================================================================
  90:../Generated_Code/Cpu.c **** **     Method      :  Cpu_INT_NMIInterrupt (component MKL25Z128LK4)
  91:../Generated_Code/Cpu.c **** **
  92:../Generated_Code/Cpu.c **** **     Description :
  93:../Generated_Code/Cpu.c **** **         This ISR services the Non Maskable Interrupt interrupt.
  94:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  95:../Generated_Code/Cpu.c **** ** ===================================================================
  96:../Generated_Code/Cpu.c **** */
  97:../Generated_Code/Cpu.c **** PE_ISR(Cpu_INT_NMIInterrupt)
  98:../Generated_Code/Cpu.c **** {
  26              		.loc 1 98 0
  27              		.cfi_startproc
  28 0000 08B5     		push	{r3, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 3, -8
  32              		.cfi_offset 14, -4
  99:../Generated_Code/Cpu.c ****   Cpu_OnNMIINT();
  33              		.loc 1 99 0
  34 0002 FFF7FEFF 		bl	Cpu_OnNMIINT
  35              	.LVL0:
 100:../Generated_Code/Cpu.c **** }
  36              		.loc 1 100 0
  37              		@ sp needed for prologue
  38 0006 08BD     		pop	{r3, pc}
  39              		.cfi_endproc
  40              	.LFE0:
  42              		.section	.text.Cpu_Interrupt,"ax",%progbits
  43              		.align	1
  44              		.global	Cpu_Interrupt
  45              		.code	16
  46              		.thumb_func
  48              	Cpu_Interrupt:
  49              	.LFB1:
 101:../Generated_Code/Cpu.c **** 
 102:../Generated_Code/Cpu.c **** /*
 103:../Generated_Code/Cpu.c **** ** ===================================================================
 104:../Generated_Code/Cpu.c **** **     Method      :  Cpu_Cpu_Interrupt (component MKL25Z128LK4)
 105:../Generated_Code/Cpu.c **** **
 106:../Generated_Code/Cpu.c **** **     Description :
 107:../Generated_Code/Cpu.c **** **         This ISR services an unused interrupt/exception vector.
 108:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 109:../Generated_Code/Cpu.c **** ** ===================================================================
 110:../Generated_Code/Cpu.c **** */
 111:../Generated_Code/Cpu.c **** PE_ISR(Cpu_Interrupt)
 112:../Generated_Code/Cpu.c **** {
  50              		.loc 1 112 0
  51              		.cfi_startproc
 113:../Generated_Code/Cpu.c ****   /* This code can be changed using the CPU component property "Build Options / Unhandled int code"
 114:../Generated_Code/Cpu.c ****   PE_DEBUGHALT();
  52              		.loc 1 114 0
  53              	@ 114 "../Generated_Code/Cpu.c" 1
  54 0000 FFBE     		BKPT 255
  55              	@ 0 "" 2
 115:../Generated_Code/Cpu.c **** }
  56              		.loc 1 115 0
  57              		.code	16
  58              		@ sp needed for prologue
  59 0002 7047     		bx	lr
  60              		.cfi_endproc
  61              	.LFE1:
  63              		.section	.text.__init_hardware,"ax",%progbits
  64              		.align	1
  65              		.global	__init_hardware
  66              		.code	16
  67              		.thumb_func
  69              	__init_hardware:
  70              	.LFB2:
 116:../Generated_Code/Cpu.c **** 
 117:../Generated_Code/Cpu.c **** 
 118:../Generated_Code/Cpu.c **** /*** !!! Here you can place your own code using property "User data declarations" on the build opti
 119:../Generated_Code/Cpu.c **** 
 120:../Generated_Code/Cpu.c **** /*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware).
 121:../Generated_Code/Cpu.c **** /*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
 122:../Generated_Code/Cpu.c **** void __init_hardware(void)
 123:../Generated_Code/Cpu.c **** {
  71              		.loc 1 123 0
  72              		.cfi_startproc
 124:../Generated_Code/Cpu.c **** 
 125:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code before PE initialization using property "User code befo
 126:../Generated_Code/Cpu.c **** 
 127:../Generated_Code/Cpu.c ****   /*** ### MKL25Z128VLK4 "Cpu" init code ... ***/
 128:../Generated_Code/Cpu.c ****   /*** PE initialization code after reset ***/
 129:../Generated_Code/Cpu.c ****   SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
  73              		.loc 1 129 0
  74 0000 214B     		ldr	r3, .L17
  75 0002 224A     		ldr	r2, .L17+4
  76 0004 2249     		ldr	r1, .L17+8
 123:../Generated_Code/Cpu.c **** {
  77              		.loc 1 123 0
  78 0006 10B5     		push	{r4, lr}
  79              	.LCFI1:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 4, -8
  82              		.cfi_offset 14, -4
  83              		.loc 1 129 0
  84 0008 D150     		str	r1, [r2, r3]
 130:../Generated_Code/Cpu.c ****   /* Disable the WDOG module */
 131:../Generated_Code/Cpu.c ****   /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0
 132:../Generated_Code/Cpu.c ****   SIM_COPC = SIM_COPC_COPT(0x00);
  85              		.loc 1 132 0
  86 000a 8824     		mov	r4, #136
  87 000c 214B     		ldr	r3, .L17+12
  88 000e 6201     		lsl	r2, r4, #5
  89 0010 0020     		mov	r0, #0
  90 0012 9850     		str	r0, [r3, r2]
 133:../Generated_Code/Cpu.c **** 
 134:../Generated_Code/Cpu.c ****   /* System clock initialization */
 135:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,?
 136:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescale
  91              		.loc 1 136 0
  92 0014 C021     		mov	r1, #192
  93 0016 2048     		ldr	r0, .L17+16
  94 0018 8C02     		lsl	r4, r1, #10
 137:../Generated_Code/Cpu.c ****   /* SIM_SCGC5: PORTB=1,PORTA=1 */
 138:../Generated_Code/Cpu.c ****   SIM_SCGC5 |= (SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTA_MASK); /* Enable clock gate for ports to ena
  95              		.loc 1 138 0
  96 001a 204A     		ldr	r2, .L17+20
 136:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescale
  97              		.loc 1 136 0
  98 001c 1C50     		str	r4, [r3, r0]
  99              		.loc 1 138 0
 100 001e 9C58     		ldr	r4, [r3, r2]
 101 0020 C021     		mov	r1, #192
 102 0022 C900     		lsl	r1, r1, #3
 103 0024 2143     		orr	r1, r4
 104 0026 9950     		str	r1, [r3, r2]
 139:../Generated_Code/Cpu.c ****   if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
 105              		.loc 1 139 0
 106 0028 1D4A     		ldr	r2, .L17+24
 107 002a 0821     		mov	r1, #8
 108 002c 9478     		ldrb	r4, [r2, #2]
 109 002e 0C42     		tst	r4, r1
 110 0030 02D0     		beq	.L4
 140:../Generated_Code/Cpu.c ****     /* PMC_REGSC: ACKISO=1 */
 141:../Generated_Code/Cpu.c ****     PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
 111              		.loc 1 141 0
 112 0032 9478     		ldrb	r4, [r2, #2]
 113 0034 2143     		orr	r1, r4
 114 0036 9170     		strb	r1, [r2, #2]
 115              	.L4:
 142:../Generated_Code/Cpu.c ****   }
 143:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=0,??=0,??=0,??=0,?
 144:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x00)); /* Update system prescaler
 145:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: PLLFLLSEL=0 */
 146:../Generated_Code/Cpu.c ****   SIM_SOPT2 &= (uint32_t)~(uint32_t)(SIM_SOPT2_PLLFLLSEL_MASK); /* Select FLL as a clock source for
 116              		.loc 1 146 0
 117 0038 1A49     		ldr	r1, .L17+28
 144:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x00)); /* Update system prescaler
 118              		.loc 1 144 0
 119 003a 0022     		mov	r2, #0
 120 003c 1A50     		str	r2, [r3, r0]
 121              		.loc 1 146 0
 122 003e 5C58     		ldr	r4, [r3, r1]
 123 0040 1948     		ldr	r0, .L17+32
 124 0042 2040     		and	r0, r4
 125 0044 5850     		str	r0, [r3, r1]
 147:../Generated_Code/Cpu.c ****   /* SIM_SOPT1: OSC32KSEL=0 */
 148:../Generated_Code/Cpu.c ****   SIM_SOPT1 &= (uint32_t)~(uint32_t)(SIM_SOPT1_OSC32KSEL(0x03)); /* System oscillator drives 32 kHz
 126              		.loc 1 148 0
 127 0046 1C68     		ldr	r4, [r3]
 128 0048 1848     		ldr	r0, .L17+36
 129 004a 2040     		and	r0, r4
 130 004c 1860     		str	r0, [r3]
 149:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: TPMSRC=1 */
 150:../Generated_Code/Cpu.c ****   SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
 131              		.loc 1 150 0
 132 004e 5C58     		ldr	r4, [r3, r1]
 133 0050 1748     		ldr	r0, .L17+40
 134 0052 2040     		and	r0, r4
 135 0054 8024     		mov	r4, #128
 136 0056 6404     		lsl	r4, r4, #17
 137 0058 2043     		orr	r0, r4
 138 005a 5850     		str	r0, [r3, r1]
 151:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x02)
 152:../Generated_Code/Cpu.c ****               )) | (uint32_t)(
 153:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x01)
 154:../Generated_Code/Cpu.c ****               ));                      /* Set the TPM clock */
 155:../Generated_Code/Cpu.c ****   /* Switch to FEI Mode */
 156:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
 157:../Generated_Code/Cpu.c ****   MCG_C1 = MCG_C1_CLKS(0x00) |
 139              		.loc 1 157 0
 140 005c 154B     		ldr	r3, .L17+44
 141 005e 0621     		mov	r1, #6
 142 0060 1970     		strb	r1, [r3]
 158:../Generated_Code/Cpu.c ****            MCG_C1_FRDIV(0x00) |
 159:../Generated_Code/Cpu.c ****            MCG_C1_IREFS_MASK |
 160:../Generated_Code/Cpu.c ****            MCG_C1_IRCLKEN_MASK;
 161:../Generated_Code/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=0,HGO0=0,EREFS0=0,LP=0,IRCS=0 */
 162:../Generated_Code/Cpu.c ****   MCG_C2 = MCG_C2_RANGE0(0x00);
 143              		.loc 1 162 0
 144 0062 5A70     		strb	r2, [r3, #1]
 163:../Generated_Code/Cpu.c ****   /* MCG_C4: DMX32=0,DRST_DRS=0 */
 164:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
 145              		.loc 1 164 0
 146 0064 D878     		ldrb	r0, [r3, #3]
 147 0066 1F24     		mov	r4, #31
 165:../Generated_Code/Cpu.c ****   /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 166:../Generated_Code/Cpu.c ****   OSC0_CR = OSC_CR_ERCLKEN_MASK;
 148              		.loc 1 166 0
 149 0068 1349     		ldr	r1, .L17+48
 164:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
 150              		.loc 1 164 0
 151 006a 0440     		and	r4, r0
 152              		.loc 1 166 0
 153 006c 8020     		mov	r0, #128
 164:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
 154              		.loc 1 164 0
 155 006e DC70     		strb	r4, [r3, #3]
 156              		.loc 1 166 0
 157 0070 0870     		strb	r0, [r1]
 167:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
 168:../Generated_Code/Cpu.c ****   MCG_C5 = MCG_C5_PRDIV0(0x00);
 158              		.loc 1 168 0
 159 0072 1A71     		strb	r2, [r3, #4]
 169:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
 170:../Generated_Code/Cpu.c ****   MCG_C6 = MCG_C6_VDIV0(0x00);
 160              		.loc 1 170 0
 161 0074 5A71     		strb	r2, [r3, #5]
 162              	.L5:
 171:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock
 163              		.loc 1 171 0
 164 0076 9A79     		ldrb	r2, [r3, #6]
 165 0078 D106     		lsl	r1, r2, #27
 166 007a FCD5     		bpl	.L5
 167              	.L11:
 172:../Generated_Code/Cpu.c ****   }
 173:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x00U) {    /* Wait until output of the FLL is selected */
 168              		.loc 1 173 0
 169 007c 9C79     		ldrb	r4, [r3, #6]
 170 007e 0C20     		mov	r0, #12
 171 0080 0442     		tst	r4, r0
 172 0082 FBD1     		bne	.L11
 174:../Generated_Code/Cpu.c ****   }
 175:../Generated_Code/Cpu.c ****   /*** End of PE initialization code after reset ***/
 176:../Generated_Code/Cpu.c **** 
 177:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code after PE initialization using property "User code after
 178:../Generated_Code/Cpu.c **** 
 179:../Generated_Code/Cpu.c **** }
 173              		.loc 1 179 0
 174              		@ sp needed for prologue
 175 0084 10BD     		pop	{r4, pc}
 176              	.L18:
 177 0086 C046     		.align	2
 178              	.L17:
 179 0088 080D0000 		.word	3336
 180 008c 00E000E0 		.word	-536813568
 181 0090 00000000 		.word	__vect_table
 182 0094 00700440 		.word	1074032640
 183 0098 44100000 		.word	4164
 184 009c 38100000 		.word	4152
 185 00a0 00D00740 		.word	1074253824
 186 00a4 04100000 		.word	4100
 187 00a8 FFFFFEFF 		.word	-65537
 188 00ac FFFFF3FF 		.word	-786433
 189 00b0 FFFFFFFC 		.word	-50331649
 190 00b4 00400640 		.word	1074151424
 191 00b8 00500640 		.word	1074155520
 192              		.cfi_endproc
 193              	.LFE2:
 195              		.section	.text.PE_low_level_init,"ax",%progbits
 196              		.align	1
 197              		.global	PE_low_level_init
 198              		.code	16
 199              		.thumb_func
 201              	PE_low_level_init:
 202              	.LFB3:
 180:../Generated_Code/Cpu.c **** 
 181:../Generated_Code/Cpu.c **** 
 182:../Generated_Code/Cpu.c **** 
 183:../Generated_Code/Cpu.c **** /*
 184:../Generated_Code/Cpu.c **** ** ===================================================================
 185:../Generated_Code/Cpu.c **** **     Method      :  PE_low_level_init (component MKL25Z128LK4)
 186:../Generated_Code/Cpu.c **** **
 187:../Generated_Code/Cpu.c **** **     Description :
 188:../Generated_Code/Cpu.c **** **         Initializes beans and provides common register initialization. 
 189:../Generated_Code/Cpu.c **** **         The method is called automatically as a part of the 
 190:../Generated_Code/Cpu.c **** **         application initialization code.
 191:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 192:../Generated_Code/Cpu.c **** ** ===================================================================
 193:../Generated_Code/Cpu.c **** */
 194:../Generated_Code/Cpu.c **** void PE_low_level_init(void)
 195:../Generated_Code/Cpu.c **** {
 203              		.loc 1 195 0
 204              		.cfi_startproc
 196:../Generated_Code/Cpu.c ****   #ifdef PEX_RTOS_INIT
 197:../Generated_Code/Cpu.c ****     PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by 
 198:../Generated_Code/Cpu.c ****   #endif
 199:../Generated_Code/Cpu.c ****       /* Initialization of the SIM module */
 200:../Generated_Code/Cpu.c ****   /* PORTA_PCR4: ISF=0,MUX=7 */
 201:../Generated_Code/Cpu.c ****   PORTA_PCR4 = (uint32_t)((PORTA_PCR4 & (uint32_t)~(uint32_t)(
 205              		.loc 1 201 0
 206 0000 1F4A     		ldr	r2, .L20
 195:../Generated_Code/Cpu.c **** {
 207              		.loc 1 195 0
 208 0002 38B5     		push	{r3, r4, r5, lr}
 209              	.LCFI2:
 210              		.cfi_def_cfa_offset 16
 211              		.cfi_offset 3, -16
 212              		.cfi_offset 4, -12
 213              		.cfi_offset 5, -8
 214              		.cfi_offset 14, -4
 215              		.loc 1 201 0
 216 0004 1F48     		ldr	r0, .L20+4
 217 0006 1369     		ldr	r3, [r2, #16]
 218 0008 E021     		mov	r1, #224
 219 000a 0340     		and	r3, r0
 220 000c C900     		lsl	r1, r1, #3
 221 000e 0B43     		orr	r3, r1
 222 0010 1361     		str	r3, [r2, #16]
 202:../Generated_Code/Cpu.c ****                 PORT_PCR_ISF_MASK
 203:../Generated_Code/Cpu.c ****                )) | (uint32_t)(
 204:../Generated_Code/Cpu.c ****                 PORT_PCR_MUX(0x07)
 205:../Generated_Code/Cpu.c ****                ));
 206:../Generated_Code/Cpu.c ****         /* Initialization of the RCM module */
 207:../Generated_Code/Cpu.c ****   /* RCM_RPFW: RSTFLTSEL=0 */
 208:../Generated_Code/Cpu.c ****   RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));
 223              		.loc 1 208 0
 224 0012 1D4B     		ldr	r3, .L20+8
 225 0014 1F25     		mov	r5, #31
 226 0016 5C79     		ldrb	r4, [r3, #5]
 209:../Generated_Code/Cpu.c ****   /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
 210:../Generated_Code/Cpu.c ****   RCM_RPFC &= (uint8_t)~(uint8_t)(
 211:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSS_MASK |
 212:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSRW(0x03)
 213:../Generated_Code/Cpu.c ****               );
 214:../Generated_Code/Cpu.c ****         /* Initialization of the FTFL_FlashConfig module */
 215:../Generated_Code/Cpu.c ****       /* Initialization of the PMC module */
 216:../Generated_Code/Cpu.c ****   /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
 217:../Generated_Code/Cpu.c ****   PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
 218:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDIE_MASK |
 219:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDV(0x03)
 220:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 221:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDACK_MASK |
 222:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDRE_MASK
 223:../Generated_Code/Cpu.c ****                ));
 224:../Generated_Code/Cpu.c ****   /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
 225:../Generated_Code/Cpu.c ****   PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
 226:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWIE_MASK |
 227:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWV(0x03)
 228:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 229:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWACK_MASK
 230:../Generated_Code/Cpu.c ****                ));
 231:../Generated_Code/Cpu.c ****   /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
 232:../Generated_Code/Cpu.c ****   PMC_REGSC &= (uint8_t)~(uint8_t)(
 233:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGEN_MASK |
 234:../Generated_Code/Cpu.c ****                 PMC_REGSC_ACKISO_MASK |
 235:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGBE_MASK
 236:../Generated_Code/Cpu.c ****                );
 237:../Generated_Code/Cpu.c ****   /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
 238:../Generated_Code/Cpu.c ****   SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
 239:../Generated_Code/Cpu.c ****   /* Common initialization of the CPU registers */
 240:../Generated_Code/Cpu.c ****   /* PORTA_PCR20: ISF=0,MUX=7 */
 241:../Generated_Code/Cpu.c ****   PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
 242:../Generated_Code/Cpu.c ****                  PORT_PCR_ISF_MASK
 243:../Generated_Code/Cpu.c ****                 )) | (uint32_t)(
 244:../Generated_Code/Cpu.c ****                  PORT_PCR_MUX(0x07)
 245:../Generated_Code/Cpu.c ****                 ));
 246:../Generated_Code/Cpu.c ****   /* NVIC_IPR1: PRI_6=0 */
 247:../Generated_Code/Cpu.c ****   NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));
 248:../Generated_Code/Cpu.c ****   /* ### FreeRTOS "FRTOS1" init code ... */
 249:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd3" component auto initialization. Auto initialization feature can be di
 250:../Generated_Code/Cpu.c ****   (void)BitIoLdd3_Init(NULL);
 251:../Generated_Code/Cpu.c ****   /* ### LED "LED1" init code ... */
 252:../Generated_Code/Cpu.c ****   LED1_Init(); /* initializes the driver */
 253:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd4" component auto initialization. Auto initialization feature can be di
 254:../Generated_Code/Cpu.c ****   (void)BitIoLdd4_Init(NULL);
 255:../Generated_Code/Cpu.c ****   /* ### LED "LED2" init code ... */
 256:../Generated_Code/Cpu.c ****   LED2_Init(); /* initializes the driver */
 257:../Generated_Code/Cpu.c **** }
 227              		.loc 1 257 0
 228              		@ sp needed for prologue
 208:../Generated_Code/Cpu.c ****   RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));
 229              		.loc 1 208 0
 230 0018 AC43     		bic	r4, r5
 231 001a 5C71     		strb	r4, [r3, #5]
 210:../Generated_Code/Cpu.c ****   RCM_RPFC &= (uint8_t)~(uint8_t)(
 232              		.loc 1 210 0
 233 001c 1C79     		ldrb	r4, [r3, #4]
 234 001e 0725     		mov	r5, #7
 235 0020 AC43     		bic	r4, r5
 236 0022 1C71     		strb	r4, [r3, #4]
 217:../Generated_Code/Cpu.c ****   PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
 237              		.loc 1 217 0
 238 0024 194B     		ldr	r3, .L20+12
 239 0026 7325     		mov	r5, #115
 240 0028 1C78     		ldrb	r4, [r3]
 241 002a AC43     		bic	r4, r5
 242 002c 5025     		mov	r5, #80
 243 002e 2C43     		orr	r4, r5
 244 0030 1C70     		strb	r4, [r3]
 225:../Generated_Code/Cpu.c ****   PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
 245              		.loc 1 225 0
 246 0032 5C78     		ldrb	r4, [r3, #1]
 247 0034 6325     		mov	r5, #99
 248 0036 AC43     		bic	r4, r5
 249 0038 4025     		mov	r5, #64
 250 003a 2C43     		orr	r4, r5
 251 003c 5C70     		strb	r4, [r3, #1]
 232:../Generated_Code/Cpu.c ****   PMC_REGSC &= (uint8_t)~(uint8_t)(
 252              		.loc 1 232 0
 253 003e 9C78     		ldrb	r4, [r3, #2]
 254 0040 1925     		mov	r5, #25
 255 0042 AC43     		bic	r4, r5
 256 0044 9C70     		strb	r4, [r3, #2]
 238:../Generated_Code/Cpu.c ****   SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
 257              		.loc 1 238 0
 258 0046 124B     		ldr	r3, .L20+16
 259 0048 0024     		mov	r4, #0
 260 004a 1C70     		strb	r4, [r3]
 241:../Generated_Code/Cpu.c ****   PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
 261              		.loc 1 241 0
 262 004c 156D     		ldr	r5, [r2, #80]
 263 004e 2840     		and	r0, r5
 264 0050 0143     		orr	r1, r0
 265 0052 1165     		str	r1, [r2, #80]
 247:../Generated_Code/Cpu.c ****   NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));
 266              		.loc 1 247 0
 267 0054 C120     		mov	r0, #193
 268 0056 0F4A     		ldr	r2, .L20+20
 269 0058 8300     		lsl	r3, r0, #2
 270 005a D558     		ldr	r5, [r2, r3]
 271 005c 0E49     		ldr	r1, .L20+24
 250:../Generated_Code/Cpu.c ****   (void)BitIoLdd3_Init(NULL);
 272              		.loc 1 250 0
 273 005e 201C     		mov	r0, r4
 247:../Generated_Code/Cpu.c ****   NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));
 274              		.loc 1 247 0
 275 0060 2940     		and	r1, r5
 276 0062 D150     		str	r1, [r2, r3]
 250:../Generated_Code/Cpu.c ****   (void)BitIoLdd3_Init(NULL);
 277              		.loc 1 250 0
 278 0064 FFF7FEFF 		bl	BitIoLdd3_Init
 279              	.LVL1:
 252:../Generated_Code/Cpu.c ****   LED1_Init(); /* initializes the driver */
 280              		.loc 1 252 0
 281 0068 0C4D     		ldr	r5, .L20+28
 282 006a 6868     		ldr	r0, [r5, #4]
 283 006c FFF7FEFF 		bl	BitIoLdd3_SetVal
 284              	.LVL2:
 254:../Generated_Code/Cpu.c ****   (void)BitIoLdd4_Init(NULL);
 285              		.loc 1 254 0
 286 0070 201C     		mov	r0, r4
 287 0072 FFF7FEFF 		bl	BitIoLdd4_Init
 288              	.LVL3:
 256:../Generated_Code/Cpu.c ****   LED2_Init(); /* initializes the driver */
 289              		.loc 1 256 0
 290 0076 A868     		ldr	r0, [r5, #8]
 291 0078 FFF7FEFF 		bl	BitIoLdd4_SetVal
 292              	.LVL4:
 293              		.loc 1 257 0
 294 007c 38BD     		pop	{r3, r4, r5, pc}
 295              	.L21:
 296 007e C046     		.align	2
 297              	.L20:
 298 0080 00900440 		.word	1074040832
 299 0084 FFF8FFFE 		.word	-16779009
 300 0088 00F00740 		.word	1074262016
 301 008c 00D00740 		.word	1074253824
 302 0090 00E00740 		.word	1074257920
 303 0094 00E100E0 		.word	-536813312
 304 0098 FFFF00FF 		.word	-16711681
 305 009c 00000000 		.word	PE_LDD_DeviceDataList
 306              		.cfi_endproc
 307              	.LFE3:
 309              		.global	_cfm
 310              		.global	SR_lock
 311              		.comm	SR_reg,1,1
 312              		.section	.bss.SR_lock,"aw",%nobits
 315              	SR_lock:
 316 0000 00       		.space	1
 317              		.section	.cfmconfig,"a",%progbits
 320              	_cfm:
 321 0000 FF       		.byte	-1
 322 0001 FF       		.byte	-1
 323 0002 FF       		.byte	-1
 324 0003 FF       		.byte	-1
 325 0004 FF       		.byte	-1
 326 0005 FF       		.byte	-1
 327 0006 FF       		.byte	-1
 328 0007 FF       		.byte	-1
 329 0008 FF       		.byte	-1
 330 0009 FF       		.byte	-1
 331 000a FF       		.byte	-1
 332 000b FF       		.byte	-1
 333 000c 7E       		.byte	126
 334 000d FF       		.byte	-1
 335 000e FF       		.byte	-1
 336 000f FF       		.byte	-1
 337              		.text
 338              	.Letext0:
 339              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 340              		.file 3 "C:/Freescale/CW MCU v10.6/MCU/ProcessorExpert/lib/Kinetis/iofiles/MKL25Z4.h"
 341              		.file 4 "../Generated_Code/Cpu.h"
 342              		.file 5 "../Generated_Code/PE_Types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Cpu.c
C:\Users\Franco\AppData\Local\Temp\ccXFjuqQ.s:18     .text.Cpu_INT_NMIInterrupt:00000000 $t
C:\Users\Franco\AppData\Local\Temp\ccXFjuqQ.s:23     .text.Cpu_INT_NMIInterrupt:00000000 Cpu_INT_NMIInterrupt
C:\Users\Franco\AppData\Local\Temp\ccXFjuqQ.s:43     .text.Cpu_Interrupt:00000000 $t
C:\Users\Franco\AppData\Local\Temp\ccXFjuqQ.s:48     .text.Cpu_Interrupt:00000000 Cpu_Interrupt
C:\Users\Franco\AppData\Local\Temp\ccXFjuqQ.s:64     .text.__init_hardware:00000000 $t
C:\Users\Franco\AppData\Local\Temp\ccXFjuqQ.s:69     .text.__init_hardware:00000000 __init_hardware
C:\Users\Franco\AppData\Local\Temp\ccXFjuqQ.s:179    .text.__init_hardware:00000088 $d
C:\Users\Franco\AppData\Local\Temp\ccXFjuqQ.s:196    .text.PE_low_level_init:00000000 $t
C:\Users\Franco\AppData\Local\Temp\ccXFjuqQ.s:201    .text.PE_low_level_init:00000000 PE_low_level_init
C:\Users\Franco\AppData\Local\Temp\ccXFjuqQ.s:298    .text.PE_low_level_init:00000080 $d
C:\Users\Franco\AppData\Local\Temp\ccXFjuqQ.s:320    .cfmconfig:00000000 _cfm
C:\Users\Franco\AppData\Local\Temp\ccXFjuqQ.s:315    .bss.SR_lock:00000000 SR_lock
                            *COM*:00000001 SR_reg
C:\Users\Franco\AppData\Local\Temp\ccXFjuqQ.s:316    .bss.SR_lock:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
Cpu_OnNMIINT
__vect_table
BitIoLdd3_Init
BitIoLdd3_SetVal
BitIoLdd4_Init
BitIoLdd4_SetVal
PE_LDD_DeviceDataList
