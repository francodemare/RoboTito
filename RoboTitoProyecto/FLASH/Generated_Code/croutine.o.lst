   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"croutine.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.xCoRoutineCreate,"ax",%progbits
  18              		.align	1
  19              		.global	xCoRoutineCreate
  20              		.code	16
  21              		.thumb_func
  23              	xCoRoutineCreate:
  24              	.LFB0:
  25              		.file 1 "../Generated_Code/croutine.c"
   1:../Generated_Code/croutine.c **** /*
   2:../Generated_Code/croutine.c ****     FreeRTOS V7.2.0 - Copyright (C) 2012 Real Time Engineers Ltd.
   3:../Generated_Code/croutine.c **** 
   4:../Generated_Code/croutine.c **** 
   5:../Generated_Code/croutine.c ****     ***************************************************************************
   6:../Generated_Code/croutine.c ****      *                                                                       *
   7:../Generated_Code/croutine.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../Generated_Code/croutine.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../Generated_Code/croutine.c ****      *    available.                                                         *
  10:../Generated_Code/croutine.c ****      *                                                                       *
  11:../Generated_Code/croutine.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../Generated_Code/croutine.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../Generated_Code/croutine.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../Generated_Code/croutine.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../Generated_Code/croutine.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../Generated_Code/croutine.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../Generated_Code/croutine.c ****      *                                                                       *
  18:../Generated_Code/croutine.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../Generated_Code/croutine.c ****      *                                                                       *
  20:../Generated_Code/croutine.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../Generated_Code/croutine.c ****      *                                                                       *
  22:../Generated_Code/croutine.c ****     ***************************************************************************
  23:../Generated_Code/croutine.c **** 
  24:../Generated_Code/croutine.c **** 
  25:../Generated_Code/croutine.c ****     This file is part of the FreeRTOS distribution.
  26:../Generated_Code/croutine.c **** 
  27:../Generated_Code/croutine.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../Generated_Code/croutine.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../Generated_Code/croutine.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../Generated_Code/croutine.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../Generated_Code/croutine.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../Generated_Code/croutine.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../Generated_Code/croutine.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../Generated_Code/croutine.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../Generated_Code/croutine.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../Generated_Code/croutine.c ****     more details. You should have received a copy of the GNU General Public
  37:../Generated_Code/croutine.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../Generated_Code/croutine.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../Generated_Code/croutine.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../Generated_Code/croutine.c ****     FreeRTOS WEB site.
  41:../Generated_Code/croutine.c **** 
  42:../Generated_Code/croutine.c ****     1 tab == 4 spaces!
  43:../Generated_Code/croutine.c ****     
  44:../Generated_Code/croutine.c ****     ***************************************************************************
  45:../Generated_Code/croutine.c ****      *                                                                       *
  46:../Generated_Code/croutine.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  47:../Generated_Code/croutine.c ****      *    not run, what could be wrong?                                      *
  48:../Generated_Code/croutine.c ****      *                                                                       *
  49:../Generated_Code/croutine.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  50:../Generated_Code/croutine.c ****      *                                                                       *
  51:../Generated_Code/croutine.c ****     ***************************************************************************
  52:../Generated_Code/croutine.c **** 
  53:../Generated_Code/croutine.c ****     
  54:../Generated_Code/croutine.c ****     http://www.FreeRTOS.org - Documentation, training, latest information, 
  55:../Generated_Code/croutine.c ****     license and contact details.
  56:../Generated_Code/croutine.c ****     
  57:../Generated_Code/croutine.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  58:../Generated_Code/croutine.c ****     including FreeRTOS+Trace - an indispensable productivity tool.
  59:../Generated_Code/croutine.c **** 
  60:../Generated_Code/croutine.c ****     Real Time Engineers ltd license FreeRTOS to High Integrity Systems, who sell 
  61:../Generated_Code/croutine.c ****     the code with commercial support, indemnification, and middleware, under 
  62:../Generated_Code/croutine.c ****     the OpenRTOS brand: http://www.OpenRTOS.com.  High Integrity Systems also
  63:../Generated_Code/croutine.c ****     provide a safety engineered and independently SIL3 certified version under 
  64:../Generated_Code/croutine.c ****     the SafeRTOS brand: http://www.SafeRTOS.com.
  65:../Generated_Code/croutine.c **** */
  66:../Generated_Code/croutine.c **** 
  67:../Generated_Code/croutine.c **** #include "FreeRTOS.h"
  68:../Generated_Code/croutine.c **** #include "task.h"
  69:../Generated_Code/croutine.c **** #include "croutine.h"
  70:../Generated_Code/croutine.c **** 
  71:../Generated_Code/croutine.c **** /*
  72:../Generated_Code/croutine.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
  73:../Generated_Code/croutine.c ****  * than file scope.
  74:../Generated_Code/croutine.c ****  */
  75:../Generated_Code/croutine.c **** #ifdef portREMOVE_STATIC_QUALIFIER
  76:../Generated_Code/croutine.c **** 	#define static
  77:../Generated_Code/croutine.c **** #endif
  78:../Generated_Code/croutine.c **** 
  79:../Generated_Code/croutine.c **** 
  80:../Generated_Code/croutine.c **** /* Lists for ready and blocked co-routines. --------------------*/
  81:../Generated_Code/croutine.c **** static xList pxReadyCoRoutineLists[ configMAX_CO_ROUTINE_PRIORITIES ];	/*< Prioritised ready co-rou
  82:../Generated_Code/croutine.c **** static xList xDelayedCoRoutineList1;									/*< Delayed co-routines. */
  83:../Generated_Code/croutine.c **** static xList xDelayedCoRoutineList2;									/*< Delayed co-routines (two lists are used - one for 
  84:../Generated_Code/croutine.c **** static xList * pxDelayedCoRoutineList;									/*< Points to the delayed co-routine list currently 
  85:../Generated_Code/croutine.c **** static xList * pxOverflowDelayedCoRoutineList;							/*< Points to the delayed co-routine list curr
  86:../Generated_Code/croutine.c **** static xList xPendingReadyCoRoutineList;											/*< Holds co-routines that have been readied by 
  87:../Generated_Code/croutine.c **** 
  88:../Generated_Code/croutine.c **** /* Other file private variables. --------------------------------*/
  89:../Generated_Code/croutine.c **** corCRCB * pxCurrentCoRoutine = NULL;
  90:../Generated_Code/croutine.c **** static unsigned portBASE_TYPE uxTopCoRoutineReadyPriority = 0;
  91:../Generated_Code/croutine.c **** static portTickType xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;
  92:../Generated_Code/croutine.c **** 
  93:../Generated_Code/croutine.c **** /* The initial state of the co-routine when it is created. */
  94:../Generated_Code/croutine.c **** #define corINITIAL_STATE	( 0 )
  95:../Generated_Code/croutine.c **** 
  96:../Generated_Code/croutine.c **** /*
  97:../Generated_Code/croutine.c ****  * Place the co-routine represented by pxCRCB into the appropriate ready queue
  98:../Generated_Code/croutine.c ****  * for the priority.  It is inserted at the end of the list.
  99:../Generated_Code/croutine.c ****  *
 100:../Generated_Code/croutine.c ****  * This macro accesses the co-routine ready lists and therefore must not be
 101:../Generated_Code/croutine.c ****  * used from within an ISR.
 102:../Generated_Code/croutine.c ****  */
 103:../Generated_Code/croutine.c **** #define prvAddCoRoutineToReadyQueue( pxCRCB )																		\
 104:../Generated_Code/croutine.c **** {																													\
 105:../Generated_Code/croutine.c **** 	if( pxCRCB->uxPriority > uxTopCoRoutineReadyPriority )															\
 106:../Generated_Code/croutine.c **** 	{																												\
 107:../Generated_Code/croutine.c **** 		uxTopCoRoutineReadyPriority = pxCRCB->uxPriority;															\
 108:../Generated_Code/croutine.c **** 	}																												\
 109:../Generated_Code/croutine.c **** 	vListInsertEnd( ( xList * ) &( pxReadyCoRoutineLists[ pxCRCB->uxPriority ] ), &( pxCRCB->xGenericL
 110:../Generated_Code/croutine.c **** }	
 111:../Generated_Code/croutine.c **** 
 112:../Generated_Code/croutine.c **** /*
 113:../Generated_Code/croutine.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 114:../Generated_Code/croutine.c ****  * automatically upon the creation of the first co-routine.
 115:../Generated_Code/croutine.c ****  */
 116:../Generated_Code/croutine.c **** static void prvInitialiseCoRoutineLists( void );
 117:../Generated_Code/croutine.c **** 
 118:../Generated_Code/croutine.c **** /*
 119:../Generated_Code/croutine.c ****  * Co-routines that are readied by an interrupt cannot be placed directly into
 120:../Generated_Code/croutine.c ****  * the ready lists (there is no mutual exclusion).  Instead they are placed in
 121:../Generated_Code/croutine.c ****  * in the pending ready list in order that they can later be moved to the ready
 122:../Generated_Code/croutine.c ****  * list by the co-routine scheduler.
 123:../Generated_Code/croutine.c ****  */
 124:../Generated_Code/croutine.c **** static void prvCheckPendingReadyList( void );
 125:../Generated_Code/croutine.c **** 
 126:../Generated_Code/croutine.c **** /*
 127:../Generated_Code/croutine.c ****  * Macro that looks at the list of co-routines that are currently delayed to
 128:../Generated_Code/croutine.c ****  * see if any require waking.
 129:../Generated_Code/croutine.c ****  *
 130:../Generated_Code/croutine.c ****  * Co-routines are stored in the queue in the order of their wake time -
 131:../Generated_Code/croutine.c ****  * meaning once one co-routine has been found whose timer has not expired
 132:../Generated_Code/croutine.c ****  * we need not look any further down the list.
 133:../Generated_Code/croutine.c ****  */
 134:../Generated_Code/croutine.c **** static void prvCheckDelayedList( void );
 135:../Generated_Code/croutine.c **** 
 136:../Generated_Code/croutine.c **** /*-----------------------------------------------------------*/
 137:../Generated_Code/croutine.c **** 
 138:../Generated_Code/croutine.c **** signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxP
 139:../Generated_Code/croutine.c **** {
  26              		.loc 1 139 0
  27              		.cfi_startproc
  28              	.LVL0:
  29 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 32
  32              		.cfi_offset 0, -32
  33              		.cfi_offset 1, -28
  34              		.cfi_offset 2, -24
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40              		.loc 1 139 0
  41 0002 0090     		str	r0, [sp]
 140:../Generated_Code/croutine.c **** signed portBASE_TYPE xReturn;
 141:../Generated_Code/croutine.c **** corCRCB *pxCoRoutine;
 142:../Generated_Code/croutine.c **** 
 143:../Generated_Code/croutine.c **** 	/* Allocate the memory that will store the co-routine control block. */
 144:../Generated_Code/croutine.c **** 	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
  42              		.loc 1 144 0
  43 0004 3820     		mov	r0, #56
  44              	.LVL1:
 139:../Generated_Code/croutine.c **** {
  45              		.loc 1 139 0
  46 0006 0192     		str	r2, [sp, #4]
  47              		.loc 1 144 0
  48 0008 FFF7FEFF 		bl	pvPortMalloc
  49              	.LVL2:
  50 000c 041E     		sub	r4, r0, #0
  51              	.LVL3:
 145:../Generated_Code/croutine.c **** 	if( pxCoRoutine )
  52              		.loc 1 145 0
  53 000e 38D0     		beq	.L5
 146:../Generated_Code/croutine.c **** 	{
 147:../Generated_Code/croutine.c **** 		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
 148:../Generated_Code/croutine.c **** 		be created and the co-routine data structures need initialising. */
 149:../Generated_Code/croutine.c **** 		if( pxCurrentCoRoutine == NULL )
  54              		.loc 1 149 0
  55 0010 1D4B     		ldr	r3, .L7
  56 0012 1E4F     		ldr	r7, .L7+4
  57 0014 1968     		ldr	r1, [r3]
  58 0016 0029     		cmp	r1, #0
  59 0018 12D1     		bne	.L3
 150:../Generated_Code/croutine.c **** 		{
 151:../Generated_Code/croutine.c **** 			pxCurrentCoRoutine = pxCoRoutine;
  60              		.loc 1 151 0
  61 001a 1860     		str	r0, [r3]
  62              	.LVL4:
  63              	.LBB4:
  64              	.LBB5:
 152:../Generated_Code/croutine.c **** 			prvInitialiseCoRoutineLists();
 153:../Generated_Code/croutine.c **** 		}
 154:../Generated_Code/croutine.c **** 
 155:../Generated_Code/croutine.c **** 		/* Check the priority is within limits. */
 156:../Generated_Code/croutine.c **** 		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
 157:../Generated_Code/croutine.c **** 		{
 158:../Generated_Code/croutine.c **** 			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
 159:../Generated_Code/croutine.c **** 		}
 160:../Generated_Code/croutine.c **** 
 161:../Generated_Code/croutine.c **** 		/* Fill out the co-routine control block from the function parameters. */
 162:../Generated_Code/croutine.c **** 		pxCoRoutine->uxState = corINITIAL_STATE;
 163:../Generated_Code/croutine.c **** 		pxCoRoutine->uxPriority = uxPriority;
 164:../Generated_Code/croutine.c **** 		pxCoRoutine->uxIndex = uxIndex;
 165:../Generated_Code/croutine.c **** 		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 166:../Generated_Code/croutine.c **** 
 167:../Generated_Code/croutine.c **** 		/* Initialise all the other co-routine control block parameters. */
 168:../Generated_Code/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
 169:../Generated_Code/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
 170:../Generated_Code/croutine.c **** 
 171:../Generated_Code/croutine.c **** 		/* Set the co-routine control block as a link back from the xListItem.
 172:../Generated_Code/croutine.c **** 		This is so we can get back to the containing CRCB from a generic item
 173:../Generated_Code/croutine.c **** 		in a list. */
 174:../Generated_Code/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
 175:../Generated_Code/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
 176:../Generated_Code/croutine.c **** 	
 177:../Generated_Code/croutine.c **** 		/* Event lists are always in priority order. */
 178:../Generated_Code/croutine.c **** 		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType 
 179:../Generated_Code/croutine.c **** 		
 180:../Generated_Code/croutine.c **** 		/* Now the co-routine has been initialised it can be added to the ready
 181:../Generated_Code/croutine.c **** 		list at the correct priority. */
 182:../Generated_Code/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 183:../Generated_Code/croutine.c **** 
 184:../Generated_Code/croutine.c **** 		xReturn = pdPASS;
 185:../Generated_Code/croutine.c **** 	}
 186:../Generated_Code/croutine.c **** 	else
 187:../Generated_Code/croutine.c **** 	{		
 188:../Generated_Code/croutine.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 189:../Generated_Code/croutine.c **** 	}
 190:../Generated_Code/croutine.c **** 	
 191:../Generated_Code/croutine.c **** 	return xReturn;	
 192:../Generated_Code/croutine.c **** }
 193:../Generated_Code/croutine.c **** /*-----------------------------------------------------------*/
 194:../Generated_Code/croutine.c **** 
 195:../Generated_Code/croutine.c **** void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
 196:../Generated_Code/croutine.c **** {
 197:../Generated_Code/croutine.c **** portTickType xTimeToWake;
 198:../Generated_Code/croutine.c **** 
 199:../Generated_Code/croutine.c **** 	/* Calculate the time to wake - this may overflow but this is
 200:../Generated_Code/croutine.c **** 	not a problem. */
 201:../Generated_Code/croutine.c **** 	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 202:../Generated_Code/croutine.c **** 
 203:../Generated_Code/croutine.c **** 	/* We must remove ourselves from the ready list before adding
 204:../Generated_Code/croutine.c **** 	ourselves to the blocked list as the same list item is used for
 205:../Generated_Code/croutine.c **** 	both lists. */
 206:../Generated_Code/croutine.c **** 	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 207:../Generated_Code/croutine.c **** 
 208:../Generated_Code/croutine.c **** 	/* The list item will be inserted in wake time order. */
 209:../Generated_Code/croutine.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 210:../Generated_Code/croutine.c **** 
 211:../Generated_Code/croutine.c **** 	if( xTimeToWake < xCoRoutineTickCount )
 212:../Generated_Code/croutine.c **** 	{
 213:../Generated_Code/croutine.c **** 		/* Wake time has overflowed.  Place this item in the
 214:../Generated_Code/croutine.c **** 		overflow list. */
 215:../Generated_Code/croutine.c **** 		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->x
 216:../Generated_Code/croutine.c **** 	}
 217:../Generated_Code/croutine.c **** 	else
 218:../Generated_Code/croutine.c **** 	{
 219:../Generated_Code/croutine.c **** 		/* The wake time has not overflowed, so we can use the
 220:../Generated_Code/croutine.c **** 		current block list. */
 221:../Generated_Code/croutine.c **** 		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericL
 222:../Generated_Code/croutine.c **** 	}
 223:../Generated_Code/croutine.c **** 
 224:../Generated_Code/croutine.c **** 	if( pxEventList )
 225:../Generated_Code/croutine.c **** 	{
 226:../Generated_Code/croutine.c **** 		/* Also add the co-routine to an event list.  If this is done then the
 227:../Generated_Code/croutine.c **** 		function must be called with interrupts disabled. */
 228:../Generated_Code/croutine.c **** 		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
 229:../Generated_Code/croutine.c **** 	}
 230:../Generated_Code/croutine.c **** }
 231:../Generated_Code/croutine.c **** /*-----------------------------------------------------------*/
 232:../Generated_Code/croutine.c **** 
 233:../Generated_Code/croutine.c **** static void prvCheckPendingReadyList( void )
 234:../Generated_Code/croutine.c **** {
 235:../Generated_Code/croutine.c **** 	/* Are there any co-routines waiting to get moved to the ready list?  These
 236:../Generated_Code/croutine.c **** 	are co-routines that have been readied by an ISR.  The ISR cannot access
 237:../Generated_Code/croutine.c **** 	the	ready lists itself. */
 238:../Generated_Code/croutine.c **** 	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 239:../Generated_Code/croutine.c **** 	{
 240:../Generated_Code/croutine.c **** 		corCRCB *pxUnblockedCRCB;
 241:../Generated_Code/croutine.c **** 
 242:../Generated_Code/croutine.c **** 		/* The pending ready list can be accessed by an ISR. */
 243:../Generated_Code/croutine.c **** 		portDISABLE_INTERRUPTS();
 244:../Generated_Code/croutine.c **** 		{	
 245:../Generated_Code/croutine.c **** 			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
 246:../Generated_Code/croutine.c **** 			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 247:../Generated_Code/croutine.c **** 		}
 248:../Generated_Code/croutine.c **** 		portENABLE_INTERRUPTS();
 249:../Generated_Code/croutine.c **** 
 250:../Generated_Code/croutine.c **** 		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
 251:../Generated_Code/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
 252:../Generated_Code/croutine.c **** 	}
 253:../Generated_Code/croutine.c **** }
 254:../Generated_Code/croutine.c **** /*-----------------------------------------------------------*/
 255:../Generated_Code/croutine.c **** 
 256:../Generated_Code/croutine.c **** static void prvCheckDelayedList( void )
 257:../Generated_Code/croutine.c **** {
 258:../Generated_Code/croutine.c **** corCRCB *pxCRCB;
 259:../Generated_Code/croutine.c **** 
 260:../Generated_Code/croutine.c **** 	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 261:../Generated_Code/croutine.c **** 	while( xPassedTicks )
 262:../Generated_Code/croutine.c **** 	{
 263:../Generated_Code/croutine.c **** 		xCoRoutineTickCount++;
 264:../Generated_Code/croutine.c **** 		xPassedTicks--;
 265:../Generated_Code/croutine.c **** 
 266:../Generated_Code/croutine.c **** 		/* If the tick count has overflowed we need to swap the ready lists. */
 267:../Generated_Code/croutine.c **** 		if( xCoRoutineTickCount == 0 )
 268:../Generated_Code/croutine.c **** 		{
 269:../Generated_Code/croutine.c **** 			xList * pxTemp;
 270:../Generated_Code/croutine.c **** 
 271:../Generated_Code/croutine.c **** 			/* Tick count has overflowed so we need to swap the delay lists.  If there are
 272:../Generated_Code/croutine.c **** 			any items in pxDelayedCoRoutineList here then there is an error! */
 273:../Generated_Code/croutine.c **** 			pxTemp = pxDelayedCoRoutineList;
 274:../Generated_Code/croutine.c **** 			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 275:../Generated_Code/croutine.c **** 			pxOverflowDelayedCoRoutineList = pxTemp;
 276:../Generated_Code/croutine.c **** 		}
 277:../Generated_Code/croutine.c **** 
 278:../Generated_Code/croutine.c **** 		/* See if this tick has made a timeout expire. */
 279:../Generated_Code/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 280:../Generated_Code/croutine.c **** 		{
 281:../Generated_Code/croutine.c **** 			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 282:../Generated_Code/croutine.c **** 
 283:../Generated_Code/croutine.c **** 			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
 284:../Generated_Code/croutine.c **** 			{			
 285:../Generated_Code/croutine.c **** 				/* Timeout not yet expired. */																			
 286:../Generated_Code/croutine.c **** 				break;																				
 287:../Generated_Code/croutine.c **** 			}																						
 288:../Generated_Code/croutine.c **** 
 289:../Generated_Code/croutine.c **** 			portDISABLE_INTERRUPTS();
 290:../Generated_Code/croutine.c **** 			{
 291:../Generated_Code/croutine.c **** 				/* The event could have occurred just before this critical
 292:../Generated_Code/croutine.c **** 				section.  If this is the case then the generic list item will
 293:../Generated_Code/croutine.c **** 				have been moved to the pending ready list and the following
 294:../Generated_Code/croutine.c **** 				line is still valid.  Also the pvContainer parameter will have
 295:../Generated_Code/croutine.c **** 				been set to NULL so the following lines are also valid. */
 296:../Generated_Code/croutine.c **** 				vListRemove( &( pxCRCB->xGenericListItem ) );											
 297:../Generated_Code/croutine.c **** 
 298:../Generated_Code/croutine.c **** 				/* Is the co-routine waiting on an event also? */												
 299:../Generated_Code/croutine.c **** 				if( pxCRCB->xEventListItem.pvContainer )													
 300:../Generated_Code/croutine.c **** 				{															
 301:../Generated_Code/croutine.c **** 					vListRemove( &( pxCRCB->xEventListItem ) );											
 302:../Generated_Code/croutine.c **** 				}
 303:../Generated_Code/croutine.c **** 			}
 304:../Generated_Code/croutine.c **** 			portENABLE_INTERRUPTS();
 305:../Generated_Code/croutine.c **** 
 306:../Generated_Code/croutine.c **** 			prvAddCoRoutineToReadyQueue( pxCRCB );													
 307:../Generated_Code/croutine.c **** 		}																									
 308:../Generated_Code/croutine.c **** 	}
 309:../Generated_Code/croutine.c **** 
 310:../Generated_Code/croutine.c **** 	xLastTickCount = xCoRoutineTickCount;
 311:../Generated_Code/croutine.c **** }
 312:../Generated_Code/croutine.c **** /*-----------------------------------------------------------*/
 313:../Generated_Code/croutine.c **** 
 314:../Generated_Code/croutine.c **** void vCoRoutineSchedule( void )
 315:../Generated_Code/croutine.c **** {
 316:../Generated_Code/croutine.c **** 	/* See if any co-routines readied by events need moving to the ready lists. */
 317:../Generated_Code/croutine.c **** 	prvCheckPendingReadyList();
 318:../Generated_Code/croutine.c **** 
 319:../Generated_Code/croutine.c **** 	/* See if any delayed co-routines have timed out. */
 320:../Generated_Code/croutine.c **** 	prvCheckDelayedList();
 321:../Generated_Code/croutine.c **** 
 322:../Generated_Code/croutine.c **** 	/* Find the highest priority queue that contains ready co-routines. */
 323:../Generated_Code/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 324:../Generated_Code/croutine.c **** 	{
 325:../Generated_Code/croutine.c **** 		if( uxTopCoRoutineReadyPriority == 0 )
 326:../Generated_Code/croutine.c **** 		{
 327:../Generated_Code/croutine.c **** 			/* No more co-routines to check. */
 328:../Generated_Code/croutine.c **** 			return;
 329:../Generated_Code/croutine.c **** 		}
 330:../Generated_Code/croutine.c **** 		--uxTopCoRoutineReadyPriority;
 331:../Generated_Code/croutine.c **** 	}
 332:../Generated_Code/croutine.c **** 
 333:../Generated_Code/croutine.c **** 	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
 334:../Generated_Code/croutine.c **** 	 of the	same priority get an equal share of the processor time. */
 335:../Generated_Code/croutine.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPrio
 336:../Generated_Code/croutine.c **** 
 337:../Generated_Code/croutine.c **** 	/* Call the co-routine. */
 338:../Generated_Code/croutine.c **** 	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 339:../Generated_Code/croutine.c **** 
 340:../Generated_Code/croutine.c **** 	return;
 341:../Generated_Code/croutine.c **** }
 342:../Generated_Code/croutine.c **** /*-----------------------------------------------------------*/
 343:../Generated_Code/croutine.c **** 
 344:../Generated_Code/croutine.c **** static void prvInitialiseCoRoutineLists( void )
 345:../Generated_Code/croutine.c **** {
 346:../Generated_Code/croutine.c **** unsigned portBASE_TYPE uxPriority;
 347:../Generated_Code/croutine.c **** 
 348:../Generated_Code/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 349:../Generated_Code/croutine.c **** 	{
 350:../Generated_Code/croutine.c **** 		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
  65              		.loc 1 350 0
  66 001c 381C     		mov	r0, r7
  67              	.LVL5:
  68 001e FFF7FEFF 		bl	vListInitialise
  69              	.LVL6:
 351:../Generated_Code/croutine.c **** 	}
 352:../Generated_Code/croutine.c **** 
 353:../Generated_Code/croutine.c **** 	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
  70              		.loc 1 353 0
  71 0022 1B4E     		ldr	r6, .L7+8
  72 0024 301C     		mov	r0, r6
  73 0026 FFF7FEFF 		bl	vListInitialise
  74              	.LVL7:
 354:../Generated_Code/croutine.c **** 	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
  75              		.loc 1 354 0
  76 002a 1A4D     		ldr	r5, .L7+12
  77 002c 281C     		mov	r0, r5
  78 002e FFF7FEFF 		bl	vListInitialise
  79              	.LVL8:
 355:../Generated_Code/croutine.c **** 	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
  80              		.loc 1 355 0
  81 0032 1948     		ldr	r0, .L7+16
  82 0034 FFF7FEFF 		bl	vListInitialise
  83              	.LVL9:
 356:../Generated_Code/croutine.c **** 
 357:../Generated_Code/croutine.c **** 	/* Start with pxDelayedCoRoutineList using list1 and the
 358:../Generated_Code/croutine.c **** 	pxOverflowDelayedCoRoutineList using list2. */
 359:../Generated_Code/croutine.c **** 	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
  84              		.loc 1 359 0
  85 0038 184A     		ldr	r2, .L7+20
 360:../Generated_Code/croutine.c **** 	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
  86              		.loc 1 360 0
  87 003a 1948     		ldr	r0, .L7+24
 359:../Generated_Code/croutine.c **** 	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
  88              		.loc 1 359 0
  89 003c 1660     		str	r6, [r2]
  90              		.loc 1 360 0
  91 003e 0560     		str	r5, [r0]
  92              	.LVL10:
  93              	.L3:
  94              	.LBE5:
  95              	.LBE4:
 165:../Generated_Code/croutine.c **** 		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
  96              		.loc 1 165 0
  97 0040 009D     		ldr	r5, [sp]
 164:../Generated_Code/croutine.c **** 		pxCoRoutine->uxIndex = uxIndex;
  98              		.loc 1 164 0
  99 0042 0199     		ldr	r1, [sp, #4]
 165:../Generated_Code/croutine.c **** 		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 100              		.loc 1 165 0
 101 0044 261C     		mov	r6, r4
 162:../Generated_Code/croutine.c **** 		pxCoRoutine->uxState = corINITIAL_STATE;
 102              		.loc 1 162 0
 103 0046 0023     		mov	r3, #0
 165:../Generated_Code/croutine.c **** 		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 104              		.loc 1 165 0
 105 0048 20C6     		stmia	r6!, {r5}
 162:../Generated_Code/croutine.c **** 		pxCoRoutine->uxState = corINITIAL_STATE;
 106              		.loc 1 162 0
 107 004a A386     		strh	r3, [r4, #52]
 163:../Generated_Code/croutine.c **** 		pxCoRoutine->uxPriority = uxPriority;
 108              		.loc 1 163 0
 109 004c E362     		str	r3, [r4, #44]
 164:../Generated_Code/croutine.c **** 		pxCoRoutine->uxIndex = uxIndex;
 110              		.loc 1 164 0
 111 004e 2163     		str	r1, [r4, #48]
 168:../Generated_Code/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
 112              		.loc 1 168 0
 113 0050 301C     		mov	r0, r6
 114 0052 FFF7FEFF 		bl	vListInitialiseItem
 115              	.LVL11:
 169:../Generated_Code/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
 116              		.loc 1 169 0
 117 0056 201C     		mov	r0, r4
 118 0058 1830     		add	r0, r0, #24
 119 005a FFF7FEFF 		bl	vListInitialiseItem
 120              	.LVL12:
 182:../Generated_Code/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 121              		.loc 1 182 0
 122 005e 1148     		ldr	r0, .L7+28
 178:../Generated_Code/croutine.c **** 		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType 
 123              		.loc 1 178 0
 124 0060 0122     		mov	r2, #1
 174:../Generated_Code/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
 125              		.loc 1 174 0
 126 0062 2461     		str	r4, [r4, #16]
 175:../Generated_Code/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
 127              		.loc 1 175 0
 128 0064 6462     		str	r4, [r4, #36]
 178:../Generated_Code/croutine.c **** 		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType 
 129              		.loc 1 178 0
 130 0066 A261     		str	r2, [r4, #24]
 182:../Generated_Code/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 131              		.loc 1 182 0
 132 0068 0368     		ldr	r3, [r0]
 133 006a E46A     		ldr	r4, [r4, #44]
 134              	.LVL13:
 135 006c 9C42     		cmp	r4, r3
 136 006e 00D9     		bls	.L4
 137              	.LVL14:
 182:../Generated_Code/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 138              		.loc 1 182 0 is_stmt 0
 139 0070 0460     		str	r4, [r0]
 140              	.L4:
 182:../Generated_Code/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 141              		.loc 1 182 0
 142 0072 1421     		mov	r1, #20
 143 0074 4C43     		mul	r4, r1
 144 0076 311C     		mov	r1, r6
 145 0078 3819     		add	r0, r7, r4
 146 007a FFF7FEFF 		bl	vListInsertEnd
 147              	.LVL15:
 184:../Generated_Code/croutine.c **** 		xReturn = pdPASS;
 148              		.loc 1 184 0 is_stmt 1
 149 007e 0120     		mov	r0, #1
 150 0080 01E0     		b	.L2
 151              	.LVL16:
 152              	.L5:
 188:../Generated_Code/croutine.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 153              		.loc 1 188 0
 154 0082 0120     		mov	r0, #1
 155              	.LVL17:
 156 0084 4042     		neg	r0, r0
 157              	.LVL18:
 158              	.L2:
 192:../Generated_Code/croutine.c **** }
 159              		.loc 1 192 0
 160              		@ sp needed for prologue
 161 0086 FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 162              	.L8:
 163              		.align	2
 164              	.L7:
 165 0088 00000000 		.word	.LANCHOR0
 166 008c 00000000 		.word	.LANCHOR1
 167 0090 00000000 		.word	.LANCHOR2
 168 0094 00000000 		.word	.LANCHOR3
 169 0098 00000000 		.word	.LANCHOR4
 170 009c 00000000 		.word	.LANCHOR5
 171 00a0 00000000 		.word	.LANCHOR6
 172 00a4 00000000 		.word	.LANCHOR7
 173              		.cfi_endproc
 174              	.LFE0:
 176              		.section	.text.vCoRoutineAddToDelayedList,"ax",%progbits
 177              		.align	1
 178              		.global	vCoRoutineAddToDelayedList
 179              		.code	16
 180              		.thumb_func
 182              	vCoRoutineAddToDelayedList:
 183              	.LFB1:
 196:../Generated_Code/croutine.c **** {
 184              		.loc 1 196 0
 185              		.cfi_startproc
 186              	.LVL19:
 187 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 188              	.LCFI1:
 189              		.cfi_def_cfa_offset 24
 190              		.cfi_offset 3, -24
 191              		.cfi_offset 4, -20
 192              		.cfi_offset 5, -16
 193              		.cfi_offset 6, -12
 194              		.cfi_offset 7, -8
 195              		.cfi_offset 14, -4
 201:../Generated_Code/croutine.c **** 	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 196              		.loc 1 201 0
 197 0002 0E4F     		ldr	r7, .L17
 206:../Generated_Code/croutine.c **** 	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 198              		.loc 1 206 0
 199 0004 0E4C     		ldr	r4, .L17+4
 201:../Generated_Code/croutine.c **** 	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 200              		.loc 1 201 0
 201 0006 3B68     		ldr	r3, [r7]
 196:../Generated_Code/croutine.c **** {
 202              		.loc 1 196 0
 203 0008 0D1C     		mov	r5, r1
 201:../Generated_Code/croutine.c **** 	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 204              		.loc 1 201 0
 205 000a C618     		add	r6, r0, r3
 206              	.LVL20:
 206:../Generated_Code/croutine.c **** 	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 207              		.loc 1 206 0
 208 000c 2068     		ldr	r0, [r4]
 209              	.LVL21:
 210 000e 0430     		add	r0, r0, #4
 211 0010 FFF7FEFF 		bl	vListRemove
 212              	.LVL22:
 209:../Generated_Code/croutine.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 213              		.loc 1 209 0
 214 0014 2168     		ldr	r1, [r4]
 211:../Generated_Code/croutine.c **** 	if( xTimeToWake < xCoRoutineTickCount )
 215              		.loc 1 211 0
 216 0016 3868     		ldr	r0, [r7]
 209:../Generated_Code/croutine.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 217              		.loc 1 209 0
 218 0018 4E60     		str	r6, [r1, #4]
 219 001a 0431     		add	r1, r1, #4
 211:../Generated_Code/croutine.c **** 	if( xTimeToWake < xCoRoutineTickCount )
 220              		.loc 1 211 0
 221 001c 8642     		cmp	r6, r0
 222 001e 01D2     		bcs	.L10
 215:../Generated_Code/croutine.c **** 		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->x
 223              		.loc 1 215 0
 224 0020 084A     		ldr	r2, .L17+8
 225 0022 00E0     		b	.L16
 226              	.L10:
 221:../Generated_Code/croutine.c **** 		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericL
 227              		.loc 1 221 0
 228 0024 084A     		ldr	r2, .L17+12
 229              	.L16:
 230 0026 1068     		ldr	r0, [r2]
 231 0028 FFF7FEFF 		bl	vListInsert
 232              	.LVL23:
 224:../Generated_Code/croutine.c **** 	if( pxEventList )
 233              		.loc 1 224 0
 234 002c 002D     		cmp	r5, #0
 235 002e 04D0     		beq	.L9
 228:../Generated_Code/croutine.c **** 		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
 236              		.loc 1 228 0
 237 0030 2168     		ldr	r1, [r4]
 238 0032 281C     		mov	r0, r5
 239 0034 1831     		add	r1, r1, #24
 240 0036 FFF7FEFF 		bl	vListInsert
 241              	.LVL24:
 242              	.L9:
 230:../Generated_Code/croutine.c **** }
 243              		.loc 1 230 0
 244              		@ sp needed for prologue
 245              	.LVL25:
 246              	.LVL26:
 247 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 248              	.L18:
 249              		.align	2
 250              	.L17:
 251 003c 00000000 		.word	.LANCHOR8
 252 0040 00000000 		.word	.LANCHOR0
 253 0044 00000000 		.word	.LANCHOR6
 254 0048 00000000 		.word	.LANCHOR5
 255              		.cfi_endproc
 256              	.LFE1:
 258              		.section	.text.vCoRoutineSchedule,"ax",%progbits
 259              		.align	1
 260              		.global	vCoRoutineSchedule
 261              		.code	16
 262              		.thumb_func
 264              	vCoRoutineSchedule:
 265              	.LFB4:
 315:../Generated_Code/croutine.c **** {
 266              		.loc 1 315 0
 267              		.cfi_startproc
 268 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 269              	.LCFI2:
 270              		.cfi_def_cfa_offset 32
 271              		.cfi_offset 0, -32
 272              		.cfi_offset 1, -28
 273              		.cfi_offset 2, -24
 274              		.cfi_offset 4, -20
 275              		.cfi_offset 5, -16
 276              		.cfi_offset 6, -12
 277              		.cfi_offset 7, -8
 278              		.cfi_offset 14, -4
 279              	.L20:
 280              	.LBB13:
 281              	.LBB14:
 238:../Generated_Code/croutine.c **** 	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 282              		.loc 1 238 0
 283 0002 454B     		ldr	r3, .L45
 284 0004 1A68     		ldr	r2, [r3]
 285 0006 002A     		cmp	r2, #0
 286 0008 1DD0     		beq	.L42
 287              	.L22:
 288              	.LBB15:
 243:../Generated_Code/croutine.c **** 		portDISABLE_INTERRUPTS();
 289              		.loc 1 243 0
 290              	@ 243 "../Generated_Code/croutine.c" 1
 291 000a 5020     		  mov r0, #80 
 292 000c 80F31188 	  msr basepri, r0 
 293              	
 294              	@ 0 "" 2
 245:../Generated_Code/croutine.c **** 			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
 295              		.loc 1 245 0
 296              		.code	16
 297 0010 DD68     		ldr	r5, [r3, #12]
 298 0012 EE68     		ldr	r6, [r5, #12]
 299              	.LVL27:
 246:../Generated_Code/croutine.c **** 			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 300              		.loc 1 246 0
 301 0014 301C     		mov	r0, r6
 302 0016 1830     		add	r0, r0, #24
 303 0018 FFF7FEFF 		bl	vListRemove
 304              	.LVL28:
 248:../Generated_Code/croutine.c **** 		portENABLE_INTERRUPTS();
 305              		.loc 1 248 0
 306              	@ 248 "../Generated_Code/croutine.c" 1
 307 001c 0020     		  mov r0, #0      
 308 001e 80F31188 	  msr basepri, r0 
 309              	
 310              	@ 0 "" 2
 250:../Generated_Code/croutine.c **** 		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
 311              		.loc 1 250 0
 312              		.code	16
 313 0022 371D     		add	r7, r6, #4
 314 0024 381C     		mov	r0, r7
 315 0026 FFF7FEFF 		bl	vListRemove
 316              	.LVL29:
 251:../Generated_Code/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
 317              		.loc 1 251 0
 318 002a 3C48     		ldr	r0, .L45+4
 319 002c F46A     		ldr	r4, [r6, #44]
 320 002e 0168     		ldr	r1, [r0]
 321 0030 8C42     		cmp	r4, r1
 322 0032 00D9     		bls	.L21
 323 0034 0460     		str	r4, [r0]
 324              	.L21:
 325 0036 1423     		mov	r3, #20
 326 0038 5C43     		mul	r4, r3
 327 003a 394A     		ldr	r2, .L45+8
 328 003c 391C     		mov	r1, r7
 329 003e 1019     		add	r0, r2, r4
 330 0040 FFF7FEFF 		bl	vListInsertEnd
 331              	.LVL30:
 332 0044 DDE7     		b	.L20
 333              	.LVL31:
 334              	.L42:
 335              	.LBE15:
 336              	.LBE14:
 337              	.LBE13:
 338              	.LBB16:
 339              	.LBB17:
 260:../Generated_Code/croutine.c **** 	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 340              		.loc 1 260 0
 341 0046 FFF7FEFF 		bl	xTaskGetTickCount
 342              	.LVL32:
 343 004a 3649     		ldr	r1, .L45+12
 344 004c 364F     		ldr	r7, .L45+16
 345 004e 0C68     		ldr	r4, [r1]
 346 0050 001B     		sub	r0, r0, r4
 347 0052 3860     		str	r0, [r7]
 348              	.L41:
 261:../Generated_Code/croutine.c **** 	while( xPassedTicks )
 349              		.loc 1 261 0
 350 0054 3E68     		ldr	r6, [r7]
 351 0056 354D     		ldr	r5, .L45+20
 352 0058 002E     		cmp	r6, #0
 353 005a 37D0     		beq	.L43
 354              	.L29:
 263:../Generated_Code/croutine.c **** 		xCoRoutineTickCount++;
 355              		.loc 1 263 0
 356 005c 2B68     		ldr	r3, [r5]
 264:../Generated_Code/croutine.c **** 		xPassedTicks--;
 357              		.loc 1 264 0
 358 005e 013E     		sub	r6, r6, #1
 263:../Generated_Code/croutine.c **** 		xCoRoutineTickCount++;
 359              		.loc 1 263 0
 360 0060 0133     		add	r3, r3, #1
 264:../Generated_Code/croutine.c **** 		xPassedTicks--;
 361              		.loc 1 264 0
 362 0062 3E60     		str	r6, [r7]
 263:../Generated_Code/croutine.c **** 		xCoRoutineTickCount++;
 363              		.loc 1 263 0
 364 0064 2B60     		str	r3, [r5]
 365 0066 324E     		ldr	r6, .L45+24
 267:../Generated_Code/croutine.c **** 		if( xCoRoutineTickCount == 0 )
 366              		.loc 1 267 0
 367 0068 002B     		cmp	r3, #0
 368 006a 2AD1     		bne	.L38
 369              	.LBB18:
 274:../Generated_Code/croutine.c **** 			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 370              		.loc 1 274 0
 371 006c 314C     		ldr	r4, .L45+28
 273:../Generated_Code/croutine.c **** 			pxTemp = pxDelayedCoRoutineList;
 372              		.loc 1 273 0
 373 006e 3268     		ldr	r2, [r6]
 374              	.LVL33:
 274:../Generated_Code/croutine.c **** 			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 375              		.loc 1 274 0
 376 0070 2168     		ldr	r1, [r4]
 275:../Generated_Code/croutine.c **** 			pxOverflowDelayedCoRoutineList = pxTemp;
 377              		.loc 1 275 0
 378 0072 2260     		str	r2, [r4]
 274:../Generated_Code/croutine.c **** 			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 379              		.loc 1 274 0
 380 0074 3160     		str	r1, [r6]
 381 0076 24E0     		b	.L38
 382              	.LVL34:
 383              	.L28:
 384              	.LBE18:
 281:../Generated_Code/croutine.c **** 			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 385              		.loc 1 281 0
 386 0078 C268     		ldr	r2, [r0, #12]
 283:../Generated_Code/croutine.c **** 			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
 387              		.loc 1 283 0
 388 007a 2968     		ldr	r1, [r5]
 281:../Generated_Code/croutine.c **** 			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 389              		.loc 1 281 0
 390 007c D468     		ldr	r4, [r2, #12]
 391              	.LVL35:
 283:../Generated_Code/croutine.c **** 			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
 392              		.loc 1 283 0
 393 007e 6068     		ldr	r0, [r4, #4]
 394 0080 8142     		cmp	r1, r0
 395 0082 E7D3     		bcc	.L41
 289:../Generated_Code/croutine.c **** 			portDISABLE_INTERRUPTS();
 396              		.loc 1 289 0
 397              	@ 289 "../Generated_Code/croutine.c" 1
 398 0084 5020     		  mov r0, #80 
 399 0086 80F31188 	  msr basepri, r0 
 400              	
 401              	@ 0 "" 2
 296:../Generated_Code/croutine.c **** 				vListRemove( &( pxCRCB->xGenericListItem ) );											
 402              		.loc 1 296 0
 403              		.code	16
 404 008a 231D     		add	r3, r4, #4
 405 008c 181C     		mov	r0, r3
 406 008e 0193     		str	r3, [sp, #4]
 407 0090 FFF7FEFF 		bl	vListRemove
 408              	.LVL36:
 299:../Generated_Code/croutine.c **** 				if( pxCRCB->xEventListItem.pvContainer )													
 409              		.loc 1 299 0
 410 0094 A26A     		ldr	r2, [r4, #40]
 411 0096 002A     		cmp	r2, #0
 412 0098 03D0     		beq	.L26
 301:../Generated_Code/croutine.c **** 					vListRemove( &( pxCRCB->xEventListItem ) );											
 413              		.loc 1 301 0
 414 009a 201C     		mov	r0, r4
 415 009c 1830     		add	r0, r0, #24
 416 009e FFF7FEFF 		bl	vListRemove
 417              	.LVL37:
 418              	.L26:
 304:../Generated_Code/croutine.c **** 			portENABLE_INTERRUPTS();
 419              		.loc 1 304 0
 420              	@ 304 "../Generated_Code/croutine.c" 1
 421 00a2 0020     		  mov r0, #0      
 422 00a4 80F31188 	  msr basepri, r0 
 423              	
 424              	@ 0 "" 2
 306:../Generated_Code/croutine.c **** 			prvAddCoRoutineToReadyQueue( pxCRCB );													
 425              		.loc 1 306 0
 426              		.code	16
 427 00a8 1C48     		ldr	r0, .L45+4
 428 00aa E46A     		ldr	r4, [r4, #44]
 429              	.LVL38:
 430 00ac 0168     		ldr	r1, [r0]
 431 00ae 8C42     		cmp	r4, r1
 432 00b0 00D9     		bls	.L27
 433 00b2 0460     		str	r4, [r0]
 434              	.L27:
 435 00b4 1423     		mov	r3, #20
 436 00b6 5C43     		mul	r4, r3
 437 00b8 194A     		ldr	r2, .L45+8
 438 00ba 0199     		ldr	r1, [sp, #4]
 439 00bc 1019     		add	r0, r2, r4
 440 00be FFF7FEFF 		bl	vListInsertEnd
 441              	.LVL39:
 442              	.L38:
 279:../Generated_Code/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 443              		.loc 1 279 0
 444 00c2 3068     		ldr	r0, [r6]
 445 00c4 0368     		ldr	r3, [r0]
 446 00c6 002B     		cmp	r3, #0
 447 00c8 D6D1     		bne	.L28
 448 00ca C3E7     		b	.L41
 449              	.L43:
 450 00cc 1348     		ldr	r0, .L45+4
 310:../Generated_Code/croutine.c **** 	xLastTickCount = xCoRoutineTickCount;
 451              		.loc 1 310 0
 452 00ce 2F68     		ldr	r7, [r5]
 453 00d0 144B     		ldr	r3, .L45+12
 454 00d2 0668     		ldr	r6, [r0]
 455 00d4 0097     		str	r7, [sp]
 456 00d6 1F60     		str	r7, [r3]
 457              	.L30:
 458              	.LBE17:
 459              	.LBE16:
 323:../Generated_Code/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 460              		.loc 1 323 0
 461 00d8 1422     		mov	r2, #20
 462 00da 7243     		mul	r2, r6
 463 00dc 1049     		ldr	r1, .L45+8
 464 00de 5458     		ldr	r4, [r2, r1]
 465 00e0 002C     		cmp	r4, #0
 466 00e2 05D1     		bne	.L44
 467              	.L33:
 325:../Generated_Code/croutine.c **** 		if( uxTopCoRoutineReadyPriority == 0 )
 468              		.loc 1 325 0
 469 00e4 002E     		cmp	r6, #0
 470 00e6 01D1     		bne	.L31
 471 00e8 0660     		str	r6, [r0]
 472 00ea 13E0     		b	.L19
 473              	.L31:
 330:../Generated_Code/croutine.c **** 		--uxTopCoRoutineReadyPriority;
 474              		.loc 1 330 0
 475 00ec 013E     		sub	r6, r6, #1
 476 00ee F3E7     		b	.L30
 477              	.L44:
 478 00f0 0660     		str	r6, [r0]
 479              	.LBB19:
 335:../Generated_Code/croutine.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPrio
 480              		.loc 1 335 0
 481 00f2 8818     		add	r0, r1, r2
 482              	.LVL40:
 483 00f4 4668     		ldr	r6, [r0, #4]
 484 00f6 071C     		mov	r7, r0
 485 00f8 7568     		ldr	r5, [r6, #4]
 486 00fa 0837     		add	r7, r7, #8
 487 00fc 4560     		str	r5, [r0, #4]
 488 00fe BD42     		cmp	r5, r7
 489 0100 01D1     		bne	.L34
 335:../Generated_Code/croutine.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPrio
 490              		.loc 1 335 0 is_stmt 0
 491 0102 6B68     		ldr	r3, [r5, #4]
 492 0104 4360     		str	r3, [r0, #4]
 493              	.L34:
 335:../Generated_Code/croutine.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPrio
 494              		.loc 1 335 0
 495 0106 4168     		ldr	r1, [r0, #4]
 496 0108 0B4A     		ldr	r2, .L45+32
 497 010a C868     		ldr	r0, [r1, #12]
 498              	.LVL41:
 499 010c 1060     		str	r0, [r2]
 500              	.LBE19:
 338:../Generated_Code/croutine.c **** 	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 501              		.loc 1 338 0 is_stmt 1
 502 010e 016B     		ldr	r1, [r0, #48]
 503 0110 0468     		ldr	r4, [r0]
 504 0112 A047     		blx	r4
 505              	.LVL42:
 506              	.L19:
 341:../Generated_Code/croutine.c **** }
 507              		.loc 1 341 0
 508              		@ sp needed for prologue
 509 0114 F7BD     		pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 510              	.L46:
 511 0116 C046     		.align	2
 512              	.L45:
 513 0118 00000000 		.word	.LANCHOR4
 514 011c 00000000 		.word	.LANCHOR7
 515 0120 00000000 		.word	.LANCHOR1
 516 0124 00000000 		.word	.LANCHOR10
 517 0128 00000000 		.word	.LANCHOR9
 518 012c 00000000 		.word	.LANCHOR8
 519 0130 00000000 		.word	.LANCHOR5
 520 0134 00000000 		.word	.LANCHOR6
 521 0138 00000000 		.word	.LANCHOR0
 522              		.cfi_endproc
 523              	.LFE4:
 525              		.section	.text.xCoRoutineRemoveFromEventList,"ax",%progbits
 526              		.align	1
 527              		.global	xCoRoutineRemoveFromEventList
 528              		.code	16
 529              		.thumb_func
 531              	xCoRoutineRemoveFromEventList:
 532              	.LFB6:
 361:../Generated_Code/croutine.c **** }
 362:../Generated_Code/croutine.c **** /*-----------------------------------------------------------*/
 363:../Generated_Code/croutine.c **** 
 364:../Generated_Code/croutine.c **** signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
 365:../Generated_Code/croutine.c **** {
 533              		.loc 1 365 0
 534              		.cfi_startproc
 535              	.LVL43:
 536 0000 38B5     		push	{r3, r4, r5, lr}
 537              	.LCFI3:
 538              		.cfi_def_cfa_offset 16
 539              		.cfi_offset 3, -16
 540              		.cfi_offset 4, -12
 541              		.cfi_offset 5, -8
 542              		.cfi_offset 14, -4
 366:../Generated_Code/croutine.c **** corCRCB *pxUnblockedCRCB;
 367:../Generated_Code/croutine.c **** signed portBASE_TYPE xReturn;
 368:../Generated_Code/croutine.c **** 
 369:../Generated_Code/croutine.c **** 	/* This function is called from within an interrupt.  It can only access
 370:../Generated_Code/croutine.c **** 	event lists and the pending ready list.  This function assumes that a
 371:../Generated_Code/croutine.c **** 	check has already been made to ensure pxEventList is not empty. */
 372:../Generated_Code/croutine.c **** 	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 543              		.loc 1 372 0
 544 0002 C368     		ldr	r3, [r0, #12]
 373:../Generated_Code/croutine.c **** 	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 374:../Generated_Code/croutine.c **** 	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) 
 375:../Generated_Code/croutine.c **** 
 376:../Generated_Code/croutine.c **** 	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
 377:../Generated_Code/croutine.c **** 	{
 378:../Generated_Code/croutine.c **** 		xReturn = pdTRUE;
 379:../Generated_Code/croutine.c **** 	}
 380:../Generated_Code/croutine.c **** 	else
 381:../Generated_Code/croutine.c **** 	{
 382:../Generated_Code/croutine.c **** 		xReturn = pdFALSE;
 383:../Generated_Code/croutine.c **** 	}
 384:../Generated_Code/croutine.c **** 
 385:../Generated_Code/croutine.c **** 	return xReturn;
 386:../Generated_Code/croutine.c **** }
 545              		.loc 1 386 0
 546              		@ sp needed for prologue
 372:../Generated_Code/croutine.c **** 	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 547              		.loc 1 372 0
 548 0004 DC68     		ldr	r4, [r3, #12]
 549              	.LVL44:
 373:../Generated_Code/croutine.c **** 	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 550              		.loc 1 373 0
 551 0006 251C     		mov	r5, r4
 552 0008 1835     		add	r5, r5, #24
 553 000a 281C     		mov	r0, r5
 554              	.LVL45:
 555 000c FFF7FEFF 		bl	vListRemove
 556              	.LVL46:
 374:../Generated_Code/croutine.c **** 	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) 
 557              		.loc 1 374 0
 558 0010 291C     		mov	r1, r5
 559 0012 0548     		ldr	r0, .L48
 560 0014 FFF7FEFF 		bl	vListInsertEnd
 561              	.LVL47:
 376:../Generated_Code/croutine.c **** 	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
 562              		.loc 1 376 0
 563 0018 0448     		ldr	r0, .L48+4
 564 001a E26A     		ldr	r2, [r4, #44]
 565 001c 0168     		ldr	r1, [r0]
 566 001e 0020     		mov	r0, #0
 567 0020 CB6A     		ldr	r3, [r1, #44]
 568 0022 9A42     		cmp	r2, r3
 569 0024 4041     		adc	r0, r0, r0
 570              	.LVL48:
 571              	.LVL49:
 572              		.loc 1 386 0
 573 0026 38BD     		pop	{r3, r4, r5, pc}
 574              	.L49:
 575              		.align	2
 576              	.L48:
 577 0028 00000000 		.word	.LANCHOR4
 578 002c 00000000 		.word	.LANCHOR0
 579              		.cfi_endproc
 580              	.LFE6:
 582              		.global	pxCurrentCoRoutine
 583              		.section	.bss.xDelayedCoRoutineList1,"aw",%nobits
 584              		.align	2
 585              		.set	.LANCHOR2,. + 0
 588              	xDelayedCoRoutineList1:
 589 0000 00000000 		.space	20
 589      00000000 
 589      00000000 
 589      00000000 
 589      00000000 
 590              		.section	.bss.xPassedTicks,"aw",%nobits
 591              		.align	2
 592              		.set	.LANCHOR9,. + 0
 595              	xPassedTicks:
 596 0000 00000000 		.space	4
 597              		.section	.bss.xPendingReadyCoRoutineList,"aw",%nobits
 598              		.align	2
 599              		.set	.LANCHOR4,. + 0
 602              	xPendingReadyCoRoutineList:
 603 0000 00000000 		.space	20
 603      00000000 
 603      00000000 
 603      00000000 
 603      00000000 
 604              		.section	.bss.pxCurrentCoRoutine,"aw",%nobits
 605              		.align	2
 606              		.set	.LANCHOR0,. + 0
 609              	pxCurrentCoRoutine:
 610 0000 00000000 		.space	4
 611              		.section	.bss.xDelayedCoRoutineList2,"aw",%nobits
 612              		.align	2
 613              		.set	.LANCHOR3,. + 0
 616              	xDelayedCoRoutineList2:
 617 0000 00000000 		.space	20
 617      00000000 
 617      00000000 
 617      00000000 
 617      00000000 
 618              		.section	.bss.xCoRoutineTickCount,"aw",%nobits
 619              		.align	2
 620              		.set	.LANCHOR8,. + 0
 623              	xCoRoutineTickCount:
 624 0000 00000000 		.space	4
 625              		.section	.bss.xLastTickCount,"aw",%nobits
 626              		.align	2
 627              		.set	.LANCHOR10,. + 0
 630              	xLastTickCount:
 631 0000 00000000 		.space	4
 632              		.section	.bss.pxDelayedCoRoutineList,"aw",%nobits
 633              		.align	2
 634              		.set	.LANCHOR5,. + 0
 637              	pxDelayedCoRoutineList:
 638 0000 00000000 		.space	4
 639              		.section	.bss.pxReadyCoRoutineLists,"aw",%nobits
 640              		.align	2
 641              		.set	.LANCHOR1,. + 0
 644              	pxReadyCoRoutineLists:
 645 0000 00000000 		.space	20
 645      00000000 
 645      00000000 
 645      00000000 
 645      00000000 
 646              		.section	.bss.uxTopCoRoutineReadyPriority,"aw",%nobits
 647              		.align	2
 648              		.set	.LANCHOR7,. + 0
 651              	uxTopCoRoutineReadyPriority:
 652 0000 00000000 		.space	4
 653              		.section	.bss.pxOverflowDelayedCoRoutineList,"aw",%nobits
 654              		.align	2
 655              		.set	.LANCHOR6,. + 0
 658              	pxOverflowDelayedCoRoutineList:
 659 0000 00000000 		.space	4
 660              		.text
 661              	.Letext0:
 662              		.file 2 "../Generated_Code/list.h"
 663              		.file 3 "../Generated_Code/portmacro.h"
 664              		.file 4 "../Generated_Code/croutine.h"
DEFINED SYMBOLS
                            *ABS*:00000000 croutine.c
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:18     .text.xCoRoutineCreate:00000000 $t
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:23     .text.xCoRoutineCreate:00000000 xCoRoutineCreate
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:165    .text.xCoRoutineCreate:00000088 $d
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:177    .text.vCoRoutineAddToDelayedList:00000000 $t
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:182    .text.vCoRoutineAddToDelayedList:00000000 vCoRoutineAddToDelayedList
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:251    .text.vCoRoutineAddToDelayedList:0000003c $d
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:259    .text.vCoRoutineSchedule:00000000 $t
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:264    .text.vCoRoutineSchedule:00000000 vCoRoutineSchedule
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:513    .text.vCoRoutineSchedule:00000118 $d
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:526    .text.xCoRoutineRemoveFromEventList:00000000 $t
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:531    .text.xCoRoutineRemoveFromEventList:00000000 xCoRoutineRemoveFromEventList
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:577    .text.xCoRoutineRemoveFromEventList:00000028 $d
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:609    .bss.pxCurrentCoRoutine:00000000 pxCurrentCoRoutine
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:584    .bss.xDelayedCoRoutineList1:00000000 $d
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:588    .bss.xDelayedCoRoutineList1:00000000 xDelayedCoRoutineList1
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:591    .bss.xPassedTicks:00000000 $d
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:595    .bss.xPassedTicks:00000000 xPassedTicks
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:598    .bss.xPendingReadyCoRoutineList:00000000 $d
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:602    .bss.xPendingReadyCoRoutineList:00000000 xPendingReadyCoRoutineList
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:605    .bss.pxCurrentCoRoutine:00000000 $d
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:612    .bss.xDelayedCoRoutineList2:00000000 $d
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:616    .bss.xDelayedCoRoutineList2:00000000 xDelayedCoRoutineList2
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:619    .bss.xCoRoutineTickCount:00000000 $d
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:623    .bss.xCoRoutineTickCount:00000000 xCoRoutineTickCount
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:626    .bss.xLastTickCount:00000000 $d
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:630    .bss.xLastTickCount:00000000 xLastTickCount
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:633    .bss.pxDelayedCoRoutineList:00000000 $d
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:637    .bss.pxDelayedCoRoutineList:00000000 pxDelayedCoRoutineList
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:640    .bss.pxReadyCoRoutineLists:00000000 $d
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:644    .bss.pxReadyCoRoutineLists:00000000 pxReadyCoRoutineLists
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:647    .bss.uxTopCoRoutineReadyPriority:00000000 $d
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:651    .bss.uxTopCoRoutineReadyPriority:00000000 uxTopCoRoutineReadyPriority
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:654    .bss.pxOverflowDelayedCoRoutineList:00000000 $d
C:\Users\Franco\AppData\Local\Temp\cc2zo6GQ.s:658    .bss.pxOverflowDelayedCoRoutineList:00000000 pxOverflowDelayedCoRoutineList
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
vListInitialiseItem
vListInsertEnd
vListRemove
vListInsert
xTaskGetTickCount
